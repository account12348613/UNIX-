互斥锁、自旋锁、读写锁、悲观锁、乐观锁的应用场景
https://blog.csdn.net/qq_34827674/article/details/108608566?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164868779716781685333883%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164868779716781685333883&biz_id=0&spm=1018.2226.3001.4187

c语言中static关键字用法详解
https://blog.csdn.net/guotianqing/article/details/79828100

线程同步的两个工具：互斥量、条件变量

互斥量：防止线程A试图访问一个共享变量时，线程B正在对其修改。
条件变量：允许线程间相互通知共享变量的状态发生了变化。

临界区：访问一共享资源的代码片段，并且该代码的执行为原子操作。

互斥量的两种状态：锁定和未锁定
    任何时候只有一个线程可以锁定该互斥量
    对已经锁定的互斥量再次锁定可能阻塞线程或者报错失败。
    只有所有者才能对该互斥量解锁

    一般情况下，不同的共享资源会使用不同的互斥量，每个线程访问共享资源时应遵守如下规则：
        1.针对共享资源锁定互斥量
        2.操作共享资源
        3.互斥量解锁

静态分配的互斥量
    类型：pthread_mutex_t
    使用前必须进行初始化
    可使用 pthread_mutex_t mtx = PTHREAD_MUTEX_INITIALIZER 进行赋值。

    初始化后，互斥量处于未锁定的状态，可使用pthread_mutex_lock()对互斥量进行锁定。

    #include <pthread.h>

    int pthread_mutex_lock(pthread_mutex_t *mutex);
    int pthread_mutex_unlock(pthread_mutex_t *mutex);
    返回0代表成功，出错时返回一个正数

    如果互斥量处于未锁定状态，phtread_mutex_lock()将锁定互斥量后立即返回；
    如果互斥量被其他线程锁定，phtread_mutex_lock()将一直阻塞，直到该互斥量被解锁，然后锁定该互斥量并返回。

    如果一个线程锁定了一个互斥量后，再次锁定该互斥量，将会导致两个结果:
        线程陷入死锁：因为线程试图锁定自己持有的互斥量而遭到阻塞
        调用失败，返回EDEADLK错误

    函数pthread_mutex_unlock()将解锁本线程锁定的互斥量，以下两种操作均是错误的：
        对未锁定的互斥量进行解锁
        解锁其他线程锁定的互斥量

    pthread_mutex_trylock()和pthread_mutex_timelock()
        如果信号已锁定，执行函数pthread_mutex_trylock()会失败并返回EBUSY错误，其他与pthread_mutex_lock()函数相同。
        pthread_mutex_timelock()将指定一个时间，来设置线程阻塞时的最大等待时间，如果等待时间已满，且没有获取互斥量的所有权，则返回ETIMEOUT错误

    实际情况中，pthread_mutex_trylock()和pthread_mutex_timelcok()的使用率比pthread_mutex_lock()低很多。
    大多数良好设计的应用程序中，线程对互斥量的持有时间应该尽可能短，以避免妨碍其他进程的并发执行。
    如果使用pthread_mutex_trylock()周期性的轮询，对互斥量进行加锁，则可能一直无法锁定该互斥量。因为其他线程可能使用pthread_mutex_lock()。

线程的死锁
    死锁:两个进程分别持有一把锁，此时又在申请对方的那把锁，两个线程都会阻塞，造成死锁。

    死锁的避免：
        定义互斥量的层级关系，对资源操作时，必须按规定的顺序进行锁定。
        线程先使用pthread_mutex_lock()锁定第一个互斥量，再使用pthread_mutex_try()锁定第二个互斥量，如果失败则释放所有互斥量。

动态初始化互斥量
    静态初始值PTHREAD_MUTEX_INITIALIZER,只能初始化静态且携带默认属性的互斥量。
    动态的互斥量，或者不使用默认的属性，则使用pthread_mutex_init()进行初始化。

    int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr);
    返回值0代表成功，出错返回一个正数。

    参数mutex指定函数执行初始化的目标互斥量。
    参数attr是pthread_mutexattr_t类型的指针，为NULL时，使用默认属性。在使用attr前，必须对attr进行初始化处理，定义互斥量的属性。
    初始化一个已经初始化的互斥量将导致未定义的行为，应当避免该行为

    以下情况，必须使用pthread_mutex_init()动态初始化：
        1.动态分配于堆中的互斥量
        2.互斥量是栈中分配的自动变量
        3.初始化由静态分配，但不使用默认属性的互斥量。
    当不再需要由自动或者动态分配的互斥量时，一个使用pthread_mutex_destroy()函数将其销毁。
    int pthread_mutex_destroy(pthread_mutex_t *mutex);
    返回值0代表成功，出错返回一个正数。

    当互斥量处于未锁定状态，且后续无线程对其进行锁定，销毁此互斥量才是安全的
    如果互斥量处于动态分配的一片内存中，在释放(free)前将其销毁
    对于自动分配的互斥量，在宿主函数返回前将其销毁

    由pthread_mutex_destroy()销毁的互斥量，可由pthread_mutex_init()重新初始化。

    1.同一线程不应对同一互斥量加锁两次
    2.线程不应对不为自己所有的互斥量解锁
    3.线程不应对未锁定的互斥量解锁

    互斥量类型：
        PTHREAD_MUTEX_NORMAL
            该类型的互斥量不具有死锁检测功能
        PTHREAD_MUTEX_ERRORCHECK
            此类的互斥量的所有操作都会执行错误检查，上述3中错误都将返回错误
        PTHREAD_MUTEX_RECURSIVE
            递归互斥量维护一个锁计数器，当线程第一次取得互斥量时，计数器置1，后续加锁都将+1,解锁-1，只有计数器为0时才能释放

条件变量
    允许一个线程通知其他线程某个共享变量状态改变，并让其他线程阻塞等待这一通知。
    条件变量总是结合互斥量使用。

    静态条件变量,初始化如下
    pthread_cond_t cond = PTHREAD_COND_INITIALIZER;

    函数pthread_cond_signal()和pthread_cond_broadcast()都可以对参数cond所指定的条件变量而发出信号
    函数pthread_cond_wait()将阻塞线程，直到收到cond的通知。

    #include <pthread.h>
    int pthread_cond_signal(pthread *cond);
    int pthread_cond_broadcast(pthread *cond);
    int pthread_cond_wait(pthread *cond, pthread_mutex_t *mutex);
    返回值0表示成功，出错时返回一个正数。

    pthread_cond_signal()和pthread_cond_broadcast()差别：
        pthread_cond_signal()至少唤醒一条阻塞的线程
        pthread_cond_broadcast()唤醒所有阻塞的线程
    pthread_cond_broadcast()总是能产生正确的结果，
    pthread_cond_signal()更加高效

    int pthread_cond_timedwait(pthread_cond_t *cond, pthread_mutex_t *mutex, const struct timespec *abstime);
    返回0代表成功，出错返回一个正数。
    如果指定时间内未收到相关条件变量的通知，则返回ETIMEOUT错误。