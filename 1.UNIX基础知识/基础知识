所有操作系统都为运行的程序提供服务：执行新程序、大开文件、读文件、分配存储区、获取当前时间等

1.登录
  登录名
  通过 cat /etc/passwd 命令查看登录名

  口令文件由7个以冒号分隔的字段组成：
  登录名：加密口令（密码）：数字用户ID：数字组ID：注释字段：起始目录 ：shell程序       例子
  abc  :x               :1000      :1000    :abc,,,  :/home/abc :/bin/bash
  
2.shell
  shell是一个命令行解释器，读取用户输入的命令，然后执行
  两种方式向shell输入：终端输入，文件（shell脚本）输入

3.文件系统
  根目录：目录的起点根（root），用字符 / 表示
  文件属性：文件类型、文件长度、文件所有者、文件许可权、文件最后修改时间等
  stat和fstat 函数返回一个所有文件属性的信息结构。
  
  文件名
  文件名中不能出现的字符只有两个： / 和 空操作符（null）
  / 用于分隔路径名中的各个文件名：/home/abc ，路径名中使用 / 来分隔各个文件名
  空操作符（null） 用于终止一个路径名
  当文件名中使用的特殊字符，必须使用shell的引号机制来引用文件名：cd "C:\Program Files\7-Zip" ，此处的文件名包含了空格，所以对路径加了引号“”
  创建一个新目录后，自动创建 . 和 .. 两个目录，分别是当前目录和父目录，在根目录中这两个目录相同。
  
  路径名
  0个或多个以斜线（/）分隔的文件名序列构成文件名，以斜线（/）开头的路径为绝对路径：cd /home/abc，否则为相对路径：cd ../snap或者 cd doc/memo/joe
  ls命令的代码实现：
******************************************************
#include <stdio.h>
#include <dirent.h>//DIR,struct dirent,

int main(int argc, char *argv[])
{
    DIR *dp;
    struct dirent *dirp;

    if(argc != 2)
        printf("input argument number error!\n");

    if((dp = opendir(argv[1])) == NULL)
        printf("open dir error!\n");

    while((dirp = readdir(dp)) != NULL)
    {
        printf("%s\n",dirp->d_name);
    }
    closedir(dp);
    return 0;
}
******************************************************
  此代码未对输出进行字母排序输出，ls命令则一般按字母顺序列出目录项
  
  使用opdendir、readdir、closedir来处理目录
  
  DIR *opendir(const char *name);
  返回指向DIR结构的指针，不用关心DIR结构中包含了什么。
  
  struct dirent *readdir(DIR *dirp);
  把DIR指针带入readdir，读取每个目录项，返回指向dirent结构体的指针，当目录中没有目录可读时返回NULL指针。
  dirent结构体中的目录名字可带入stat函数，来获取该文件的所有属性。
  
  
  工作目录
  每个进程都有一个工作目录，所有相对路径名都从工作目录开始解释，进程可以使用chdir更改其工作目录。
  
  
4.输入和输出
  
  文件描述符
  文件描述符是一个很小的非负整数，用来标识特定进程正在读写的文件。
  
  标准输入、标准输出、标准出错
  每当运行一个程序时，所有的shell都为其打开这三个文件描述符，一般都连向终端。
  重定向
  使用shell命令是可重定向到其他文件
  标准输入重定向 
  命令 < 文件             将指定文件作为命令的输入设备
  命令 << 分界符          示从标准输入设备（键盘）中读入，直到遇到分界符才停止（读入的数据不包括分界符），这里的分界符其实就是自定义的字符串
  命令 < 文件 1 > 文件 2  将文件 1 作为命令的输入设备，该命令的执行结果输出到文件 2 中。
  标准输出重定向 
  命令 > 文件	      将命令执行的标准输出结果重定向输出到指定的文件中，如果该文件已包含数据，会清空原有数据，再写入新数据。
  命令 2> 文件	    将命令执行的错误输出结果重定向到指定的文件中，如果该文件中已包含数据，会清空原有数据，再写入新数据。
  命令 >> 文件	    将命令执行的标准输出结果重定向输出到指定的文件中，如果该文件已包含数据，新数据将写入到原有内容的后面。
  命令 2>> 文件	    将命令执行的错误输出结果重定向到指定的文件中，如果该文件中已包含数据，新数据将写入到原有内容的后面。
  命令 >> 文件 2>&1
  或者
  命令 &>> 文件	    将标准输出或者错误输出写入到指定文件，如果该文件中已包含数据，新数据将写入到原有内容的后面。注意，第一种格式中，最后的 2>&1 是一体的，可以认为是固定写法。
  
  不用缓存的I/O
  函数open、read、write、lseek、close提供了不带缓存的I/O，使用文件描述符工作
  代码：从标准输入读，写到标准输出
*****************************************************
#include <unistd.h>
#include <stdio.h>
#define BUFFSIZE 8192

int main()
{
    int n;
    char buf[BUFFSIZE];

    while((n = read(STDIN_FILENO,buf, BUFFSIZE))>0)
    {
        if((write(STDOUT_FILENO, buf, n)) != n)
        {
            printf("write error!\n");
        }
    }

    if(n < 0)
    {
        printf("read error!\n");
    }

    return 0;
}
*****************************************************
   STDIN_FILENO、STDOUT_FILENO在头文件<unistd.h>中，典型值是0、1。
   read、write也在此头文件中，read返回读取到的字节数，到达文件尾端时返回0，读错误返回-1。
  
  标准I/O（带缓存）
  标准I/O函数提供对不带缓存的I/O函数的带缓存的界面，使用标准I/O不需要担心如何选取最佳的缓存长度
  最熟悉的标准I/O函数是printf，头文件<stdio.h>包含了所有标准I/O函数的原型
  
  代码：从标准输入复制到标准输出
  
*****************************************************
#include <stdio.h>

int main()
{
    int c;
    while((c = getc(stdin)) != EOF)
    {
        if(putc(c, stdout)==EOF)
            printf("output err!\n");
    }

    if(ferror(stdin))
        printf("input err!\n");

    return 0;
}
*****************************************************
  函数getc一次读一个字符
  函数putc输出字符到标准输出
  读到最后一个字节时getc返回常数EOF（-1）
  标准输入、输出常数 stdin、stdout 定义在头文件<stdio.h>中
  
  
5.程序和进程

  程序
  存放在磁盘文件中的可执行文件
  
  进程和进程ID
  程序的执行实例为进程，或者用 任务 来表示正在被执行的程序
  每个进程都一定有一个唯一的数字标识符（进程ID），非负整数
  
  代码：打印进程ID
*****************************************************
#include <stdio.h>
#include <unistd.h>
int main()
{
    printf("process id = %d\n",getpid());
    return 0;
}
*****************************************************
  getpid()函数获取当前进程的进程ID
  
  
  进程控制
  主要函数：fork(),exec(),waitpid()
  代码：从标准输入读取命令并执行
*****************************************************
#include <stdio.h>
#include <unistd.h>//getpid(),pid_t
#include <string.h>//strlen()
#include <stdlib.h>//exit()
#include <sys/wait.h>//waitpid()
#define BUFFSIZE 8192
int main()
{
    char buf[BUFFSIZE];
    pid_t pid;
    int status;

    printf("%% ");
    while(fgets(buf, BUFFSIZE, stdin) != NULL)
    {
        buf[strlen(buf) - 1] = 0;

        if((pid = fork())<0)
            printf("fork err\n");

        else if(pid == 0)
        {
            execlp(buf, buf, (char *) 0);
            printf("can't execute: %s\n",buf);
            exit(127);
        }
        if((pid = waitpid(pid, &status, 0)) < 0)
        {
            printf("wait pid err\n");
        }
        printf("%% ");
    }
    return 0;
}
*****************************************************
  用标准I/O函数fgets()从标准输入一次读取一行
  当输入文件结束符（通常是ctrl+D）时，fgets()函数返回null指针，循环终止，则进程也终止。
  因为fgets()返回的每一行都以新行符终止，然后人为添加一个null字节，所以使用strlen()函数计算该字符串长度
  因为execlp()函数要求的是以null为结束的参数，而不是新行。所以此处用null代替新行符。
  fork()函数创建一个新进程，新进程为父进程的复制品。fork()函数返回两次，分别在父、子进程返回一次，在父进程返回子进程的进程ID，在子进程返回0。
  此处创建子进程来执行标准输入的命令。
  父进程通过waitpid()函数等待子进程终止，并获取子进程终止时的状态status。
  此函数使用了 % 作为命令提示符。
  
  
6.ANSI C
  
  函数原型
  例子：头文件<unistd.h>中
  ssize_t read(int, void *, size_t);
  ssize_t write(int, const void *, size_t);
  pid_t getpid(void);
  getpid没有参数（void），返回值类型为pid_t。
  提供函数原型后，编译程序在编译时检查调用函数是否使用了正确的参数
  
  
  类属指针
  read和write函数的第二个参数是void *类型，ANSI C使用类属指针来代替char *。
  函数原型和类属指针的组合省去了编译过程中的 显式类型 的 强制转换
  例子：将void *用于malloc函数
  函数原型：void * malloc（size_t）；
  函数调用：
    int *ptr;
    ptr = malloc(1000 * sizeof(int));
  malloc函数返回时无需强制转换为int *类型。
  
  
  原始系统数据类型
  以_t结尾的这些数据类型被称为 原始系统数据类型。通常在头文件<sys/types.h>中定义（头文件<unistd.h>包含此头文件）
  目的是为了适配不同的操作系统，防止一固定的数据类型在不同系统中使用
  
  
7.出错处理
  unix函数出错时，通常返回一个负值。整型变量errrno通常设置为具有特定信息的一个值
  例子：open函数执行成功返回一个非负的文件描述符，出错则返回-1，open出错后，约有15种不同的errno值
  例子：某些函数并不返回负值，而是返回null指针。
  头文件<errno.h>中定义了变量errno，和可赋值给它的各种常数，这些常数都以E开头，比如：EACCES，表示产生了权限问题。
  errno的两条规则：
    1.没有出错时，其值不会被例程清除。所以在哈桑农户除左时，才检验其值。
    2.任何函数不会将errno的值设置为0，头文件<errno.h>定义的所有常数都不为0.
  C标准定义了两个函数，用于打印出错信息：
    1.头文件<string.h>中 char *strerror(int errno); 将errno的值映射为以出错信息的字符串，并返回此字符串的指针。
    2.头文件<stdio.h>中 void perror(const char *msg); 先输出msg指向的字符串，然后是一个冒号，一个空格，然后时对应errno值的出错信息，然后加上一个新行符。
  代码：展示这两种出错函数的使用方法。
*****************************************************
#include <stdio.h>
#include <string.h>//strerror()
#include <errno.h>//EACCES
int main(int argc, char *argv[])
{
    //output error message to stderr
    fprintf(stderr, "EACCES: %s\n",strerror(EACCES));

    errno = ENOENT;
    perror(argv[0]);
    return 0;
}
*****************************************************
  
8.用户标识

    用户ID
    口令文件中的用户ID是个数值，用于标识系统中不同的用户。系统管理员在确定一个用户的登录名时，就分配了一个用户ID标识该用户。
    用户不能修改自身的用户ID，通常情况下，用户只有一个用户ID。
    用户ID为0的用户为根(root)或者超级用户(superuser)
    当一个进程拥有超级用户权限时，大多数的文件都不进行许可权检查，某些文件只向超级用户提供，超级用户对系统拥有自由的支配权。
    代码：打印用户ID和用户组ID
*****************************************************
#include <stdio.h>
#include <unistd.h>//getuid,getgid
int main()
{
    printf("uid = %d, gid = %d\n",getuid(), getgid());
    return 0;
}
*****************************************************

    组ID
    口令文件中也包含组ID，也是个数值。由系统管理员在确定用户登录名时分配。
    一般来说，口令文件值的多个记录项可以具有相同的组ID。
    unix中，组 被用于把若干用户 划分到 某个课题或部门中。使得同组的各个成员可以共享资源
    组文件把组名 映射为 数字组ID，通常是/etc/group。
    系统中的每个文件都包括该文件的所有者的用户ID和组ID。
    因为对于用户而言，使用名字比使用数值方便，所以口令文件包含登录名和用户ID的映射关系；组文件包含了组名和组ID的映射关系。
    命令：ls -l 使用口令文件把数值用户ID映射为登录名，再打印文件的所有者的登陆名。

    添加组ID
    unix允许用户属于多个组。
    登录时，读文件/etc/group，遍历列有该用户作为其成员的前16个登录项，就可以得到该用户的添加组ID。

9.信号
    信号是 通知进程发生了某种条件的技术，比如：除数为0，则把SIGFPE信号发送给该进程。
    信号的处理：
        1.忽略
        2.按系统默认方式处理
        3.提供处理函数
    信号的产生：
        1.键盘方式：中断键（CTRL C）和退出键（CTRL \）
        2.kill函数
        发送信号的限制：我们必须是该进程的所有者。
    代码：使用signal()函数接收信号，并处理
*****************************************************
#include <stdio.h>
#include <signal.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>
#define MAXLINE 8192
void sig_intr(int signo)
{
    printf("recive a signal: %d\n",signo);
}

int main()
{
    char buf[MAXLINE];
    pid_t pid;
    int status;

    printf("%% ");
    if(signal(SIGINT, sig_intr) == SIG_ERR)
        perror("signal");
    while(fgets(buf, MAXLINE, stdin)!=NULL)
    {
        buf[strlen(buf)-1] = 0;
        if((pid = fork()) <0)
            perror("fork");
        else if (pid == 0)
        {
            execlp(buf, buf, (char *)0);
            perror("execlp");
            exit(127);
        }

        if((pid = waitpid(pid, &status, 0))<0)
            perror("waitpid");
        printf("%% ");
    }
    return 0;
}
*****************************************************