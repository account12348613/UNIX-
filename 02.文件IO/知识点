1.文件描述符
    对于内核，所有打开的文件都由 文件描述符 引用。文件描述符是一个非负整数
    当创建或者打卡一个文件时，内核向进程返回一个文件描述符；
    当读写一个文件时，将文件描述符作为参数传入相应函数。

    默认文件描述符：
        0，标准输入
        1，标准输出
        2，标标准出错
    头文件<unistd.h>中把幻数0、1、2 用STDIN_FILENO、STDOUT_FILENO、STDERR_FILENO替换

2.open()函数
    open()函数 创建、打开一个文件。
    ########################################
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <fcntl.h>

    int open(const char *pathname, int flags);
    int open(const char *pathname, int flags, mote_t mode);//创建时，才使用第三个参数mode
    ########################################
    返回：若成功返回文件描述符，若出错则返回-1

    pathname是要创建或打开的文件名
    flags可使用以下选项：
        O_RDONLY 只读打开，一般定义为 0
        O_WRONLY 只写打开，一般定义为 1
        O_RDWR   读写打开，一般定义为 2

    这三个常数只能指定一个，但是下列常数是和选择的：
        O_APPEND 写时追加到文件尾端
        O_CREAT  文件不存在则创建文件
        O_EXCL   检测文件是否存在，若同时指定了O_CREAT，则出错。
        O_TRUNC  将已存在、且以只读或者只写打开的文件的长度截短为0
        O_NOCTTY 如果pathname为终端设备，则不把这个设备分配给这个进程(如果指定STDOUT_FILENO，则这个进程的标准输出不再是STDOUT_FILENO)
        O_NONBLOCK 如果pathname是FIFO、块特殊文件、字符特殊文件，则把此文件的本次打开操作和后续IO操作设置为非阻塞模式
        O_SYNC   使得每次的write操作都等到物理的IO操作结束。

    open()函数返回的描述符一定是 未使用的、最小的 描述符数字。
    如果一个程序关闭了标准输出（描述符为1），再打开另外一个文件，则该文件会再描述符1上打开。

    文件名和路径名截短
        如果NAME_MAX为14个字符，我们创建了一个文件名长度为15个字符的时候，系统会返回ENAMETOOLONG的错误

3.create()函数
    creat()函数用于创建一个新的文件
    ########################################
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <fcntl.h>

    int creat(const char *pathname, mode_t mode);
    ########################################
    返回：若成功则返回打开的文件描述符，失败则返回-1
    此函数等效于：
    open(pathname, O_WRONLY|O_CREAT|O_TRUNC, mode);

    open的不足之处：只能以只读打开创建的文件。如果要写创建的文件，操作是：creat(),close(),open()。

4.close()函数
    close()函数用于关闭一个已经打开的文件。
    ########################################
    #include <unistd.h>

    int close(int fd);
    ########################################
    关闭一个文件时，也释放该进程加在该文件上的所有记录锁。
    当一个进程终止时，所有打开的文件都会由内核自动关闭。

5.lseek()函数
    每个打开的文件都有一个与之关联的当前文件偏移量。是个非负整数，用来表示 从文件起始处 开始计算的字节数
    通常，读、写都是以当前文件的偏移量开始，读、写操作完成后，偏移量增加所操作的字节数。
    当打开一个文件时，默认的文件偏移量为0.
    lseek()函数返回一个文件的偏移量
    ########################################
    #include <sys/types.h>
    #include <unistd.h>

    off_t lseek(int fd, off_t offset, int whence);
    ########################################
    返回值：若成功返回文件当前的偏移量，出错返回-1
    参数offset的解释与参数whence的值有关：
    whence是 SEEK_SET :设置该文件的偏移量为offset
    whence是 SEEK_CUR :设置该文件的偏移量为offset+文件已有的偏移量。offset可正可负。
    whence是 SEEK_END :设置该文件的偏移量为文件长度+offset。offset可正可负。

    lseek(fd, 0, SEEK_CUR);
    代码用于确定文件是否可以设置偏移量，当文件描述符为管道、FIFO时，lseek返回-1，并将errno设置为EPIPE。
    代码：测试标准输入能否设置偏移量。文件见1check_offset.c
***********************************************************
#include <stdio.h>
#include <unistd.h>//lseek(),STDIN_FILENO
int main()
{
    if(lseek(STDIN_FILENO, 0, SEEK_CUR) == -1)
        printf("can't seek\n");
    else
        printf("seek ok\n");
    return 0;
}
***********************************************************
    通常文件当前的偏移量应该是个非负整数，但是某些设备允许负的偏移量。
    对于普通文件，其偏移量必须是非负值。如果偏移量可能为负值，那么在lseek函数返回时，应该判断是否为-1，而不是小于0.
    lseek只把当前文件的偏移量记录在内核内，并不引起任何的IO操作。该偏移量用于下一次的读、写操作。
    文件的偏移量可以大于文件的当前长度。中间的空位使用0填充

    代码：创建一个含有空洞的文件。文件见2crt_hole_file.c
***********************************************************
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <fcntl.h>
#include <sys/stat.h>

#define FILE_MODE (S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)
char buf1[] = "123456";
char buf2[] = "abcdef";

int main()
{
    int fd;
    if((fd= creat("file.hole", FILE_MODE))<0)
        printf("create err\n");
    if(write(fd, buf1, 6)!=6)
        printf("buf1 write err\n");
    if(lseek(fd, 10, SEEK_CUR)==-1)
        printf("lseek err\n");
    if(write(fd, buf2, 6)!=6)
        printf("buf2 write err\n");
    return 0;
}
***********************************************************
    od命令可以观察文件的实际内容，-c代表以字符的方式显示文件内容。实际结果如下：
    abc@ubuntu:~/Desktop$ od -c file.hole
    0000000   1   2   3   4   5   6  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0
    0000020   a   b   c   d   e   f
    0000026
    abc@ubuntu:~/Desktop$

6.read()函数
    read()函数用于从打开的文件中读数据。
    #include <unistd.h>

    ssize_t read(int fd, void *buf, size_t nbytes);
    返回值：读到的字节数，如果读到了文件尾部，返回0，出错则返回-1
    实际情况会小于要求读的字节数：
        1.在读到文件尾部时，读到的字节数小于要求的字节数，read返回实际读到的字节数，如果下次再次调用read，则返回0。
        2.当读取终端设备文件时，通常一次最多读一行。
        3.当从网络读时，网络中的缓冲机制 可能会造成返回值小于要求读的字节数
        4.某些面向记录的设备，比如磁带，一次最多返回一个记录。

7.write()函数
    write()函数用户向打开的文件写数据。
    #include <unistd.h>

    ssize_t write(int fd, const void *buf, size_t nbytes);
    返回值：成功就返回写入的字符数，出错则返回-1。

8.I/O效率
    read(fd, buf, nbytes);
    函数中的nbytes缓存值将影响IO的效率，在2的0-17次方中，2的13次方（8192）后，再增加缓存长度对IO效率无影响。

9.文件共享
    UNIX支持不同的进程之间共享 打开的文件。说明这种共享之前，先说明内核用于所有IO的数据结构。
    内核使用了三种数据结构，它们之间的关系决定了文件共享方面，不同进程之间的影响。
    1.进程的记录项：
        1.文件描述符标志fd
        2.指向一个 文件表 的指针。
    2.内核为打开的文件维持一张 文件表 :
        1.文件的状态标志(读、写、增写、同步、非阻塞等)
        2.文件当前的偏移量
        3.指向该文件 v节点表 的指针。
    3.每个打开的文件（或设备）都有个 v节点结构：
        1.文件信息（文件类型、操作此文件的函数指针）
        2.指向 i节点 的指针
        3.当前文件的长度

    两个独立的进程分别打开相同的文件时，两个进程分别会得到一个文件描述符，此处用3，4来区分。
    每个描述符分别指向不同的文件表，但是表中的v节点指针指向同一个v节点表。

    给出数据结构后，对前面所述的操作做进一步说明：
        1.在完成每个write后，文件表中的当前偏移量增加所写的字节数。如果文件偏移量超过了文件长度，则i节点表中的当前文件长度设置为当前文件偏移量
        2.如果使用O_APPEND标志打开文件，则该标志也会设置到文件表中的文件状态标志中，每次对该标志的文件执行写操作时，
          当前文件的偏移量都会先设置成i节点表中的文件长度，使得每次写的数据都添加到文件的尾端。
        3.lseek函数只修改文件表中的当前文件偏移量，没有进行IO操作。
        4.如果一个文件被lseek函数定位到文件的尾端，则文件表中的当前偏移量设置为i节点表中的文件长度。

    可能有多个文件描述符指向同一个文件表，比如fork()后，父子进程对于每个打开的文件描述符 共享 同一个文件表
    文件描述符标志和文件状态标志在作用范围方面的区别，前者只用于一个进程的一个描述符，后者适用于指向该 文件表 的任何进程的所有描述符。

10.原子操作
    如果完成一个功能需要进行3个动作，为了完成这个功能，原子操作是：开始执行动作后，就要完成全部动作。如果在执行某个操作时被中断，就不叫原子操作。
    简而言之：要么全部一次执行完，要么不执行，不可能只执行所有动作的一个子集。

11.dup()和dup2()函数
    这两个函数用来复制一个现存的文件描述符：
    #include <unistd.h>
    int dup(int fd);
    int dup2(int fd1, int fd2);
    返回值：成功则返回新的文件描述符，失败则返回-1

    dup()函数返回的一定是当前可用的文件描述符中的最小值。
    dup2()函数可以使用fd2指定新的文件描述符值。如果fd2已经被打开，则先将其关闭，如果fd1和fd2相同，则dup2()返回fd2，但是不关闭fd2.
    返回的新的文件描述符与dup函数的参数fd共享同一个文件表。

    复制一个文件描述符的另外一种方法是使用fcntl()函数
    调用：dup(fd);
    等效于：fcntl(fd, F_DUPFD, 0);

    调用：dup2(fd1, fd2);
    等效与：close(fd2);
           fcntl(fd1, F_DUPFD, fd2);
    第二种情况下，dup2函数并不完全等同于close函数+fcntl函数,因为：
        1.dup2()是一个原子操作，而close()+fcntl()则包括两个函数调用。
        2.dup2()和fcntl()之间有部分不相同的errno值。

12.fcntl()函数
    fcntl()函数可以改变已经打开的文件的性质
    #include <sys/types.h>
    #include <unistd.h>
    #include <fcntl.h>

    int fcntl(int fd, int cmd,.../* arg */);
    返回值：若成功则依赖cmd参数，出错返回-1

    本节的实例中，第三个参数总是一个整数，再说明记录锁时，则是一个结构体指针。

    fcntl()函数有五种功能：
        1.cmd = F_DUPFD                     :复制一个现存的描述符
        2.cmd = F_GETFD / F_SETFD           :获取/设置文件描述符
        3.cmd = F_GETFL / F_SETFL           :获取/设置文件状态标志
        4.cmd = F_GETOWN / F_SETOWN         :获取/设置异步IO所有权
        5.cmd = F_GETLK / F_SETLK / SETLKW  :获取/设置记录锁
        
    1.F_DUPFD 复制文件描述符fd，新文件描述符作为函数返回值返回。其值是尚未打开的各个描述符中>=第三个参数值中的最小值
        问题：返回值为什么不一定是第三个参数值，按照dup2()函数的功能，其返回值一定是第三个参数值。
        答：因为dup2()函数会把fd2给close掉，造成fd2未使用，所以fcntl()返回值才是fd2
    2.F_GETFD 对应于fd的文件描述符标志作为返回值返回，返回标志
    3.F_SETFD 对于fd设置文件描述符标志。新标志位按第三个参数设置。当文件描述符标志为1时，exec时不关闭，为0则关闭。
    4.F_GETFL 返回fd的文件状态标志(读、写等等)。
    5.F_SETFL 设置fd的文件状态标志为第三个参数值。
    6.F_GETOWN 获取接收SIGIO和SIGRG信号的进程ID或进程组ID。
    7.F-SETOEN 设置接收SIGIO和SIGRG信号的进程ID或进程组ID，第三个参数指定一个进程ID，取参数的绝对值指定进程ID。

    fcntl()函数的返回值于cmd参数有关。如果出错都返回-1。

    代码：指定文件描述符的命令行参数，并获取文件的状态标志位。
***********************************************************
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{
    int fd;
    int accmode;
    if(argc!=2)
        return -1;
    if((fd = fcntl(atoi(argv[1]),F_GETFL, 0))<0)
        printf("fcntl err\n");
    accmode = fd & O_ACCMODE;
    if(accmode & O_RDONLY)
        printf("read only");
    else if(accmode & O_WRONLY)
        printf("write only");
    else if(accmode & O_RDWR)
        printf("read and write");

    if(fd & O_APPEND)
        printf(", append");
    if(fd & O_NONBLOCK)
        printf(", non block");
    putchar('\n');
    return 0;
}
***********************************************************
13.ioctl()函数
14./dev/fd
